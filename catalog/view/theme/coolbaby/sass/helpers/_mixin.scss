@mixin breakpoint($class) {
  @if $class == xxs {
    @media (max-width: 479px) {
      @content;
    }
  } @else if $class == xs {
    @media (min-width: 480px) and (max-width: 767px) {
      @content;
    }
  } @else if $class == sm {
    @media (min-width: 768px) and (max-width: 991px) {
      @content;
    }
  } @else if $class == md {
    @media (min-width: 992px) and (max-width: 1199px) {
      @content;
    }
  } @else if $class == lg {
    @media (min-width: 1200px) {
      @content;
    }
  }
}

@mixin smaller-than($width) {
  @media (max-width: $width - 1) {
    @content;
  }
}

@mixin larger-than($width) {
  @media (min-width: $width + 1) {
    @content;
  }
}

@mixin between($min-width, $max-width) {
  @media (min-width: $min-width) and (max-width: $max-width - 1) {
    @content;
  }
}

@mixin linear-gradient($fromColor, $toColor) {
  background-color: $toColor; /* Fallback Color */
  background-image: -webkit-gradient(linear, left top, left bottom, from($fromColor), to($toColor)); /* Saf4+, Chrome */
  background-image: -webkit-linear-gradient(top, $fromColor, $toColor); /* Chrome 10+, Saf5.1+, iOS 5+ */
  background-image: -moz-linear-gradient(top, $fromColor, $toColor); /* FF3.6 */
  background-image: -ms-linear-gradient(top, $fromColor, $toColor); /* IE10 */
  background-image: -o-linear-gradient(top, $fromColor, $toColor); /* Opera 11.10+ */
  background-image: linear-gradient(top, $fromColor, $toColor);
  filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0, StartColorStr='#{$fromColor}', EndColorStr='#{$toColor}');
}

@mixin box-shadow($shadow) {
  -webkit-box-shadow: $shadow;
  -moz-box-shadow: $shadow;
  box-shadow: $shadow;
}

@mixin rotate($degrees) {
  -webkit-transform: rotate(#{$degrees}deg);
  -moz-transform: rotate(#{$degrees}deg);
  -ms-transform: rotate(#{$degrees}deg);
  -o-transform: rotate(#{$degrees}deg);
  transform: rotate(#{$degrees}deg);
  filter: progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($degrees)}, M12=-#{sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)});
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($degrees)}, M12=-#{sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)})";
  zoom: 1;
}

@mixin abs-pos($top: auto, $right: auto, $bottom: auto, $left: auto) {
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  position: absolute;
}

@mixin transition($transition-property, $transition-time, $method) {
  -webkit-transition: $transition-property $transition-time $method;
  -moz-transition: $transition-property $transition-time $method;
  -ms-transition: $transition-property $transition-time $method;
  -o-transition: $transition-property $transition-time $method;
  transition: $transition-property $transition-time $method;
}

@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

@mixin _position($position, $args) {
  @each $o in top right bottom left {
    $i: index($args, $o);
    @if $i
    and $i + 1 <= length($args)
    and type-of( nth($args, $i + 1) ) == number {
      #{$o}: nth($args, $i + 1);
    }
  }
  position: $position;
}

@mixin absolute($args) {
  @include _position(absolute, $args);
}

@mixin triangle($direction, $position, $color: currentColor, $size: 1em) {
  @if not index(top right bottom left, $direction) {
    @warn "Direction must be one of top, right, bottom or left.";
  } @else {
    @include absolute($position);
    @include size(0);
    content: '';
    z-index: 2;

    border-#{opposite-position($direction)}: $size * 1.5 solid $color;
    $perpendicular-borders: $size solid transparent;

    @if $direction == top or $direction == bottom {
      border-left: $perpendicular-borders;
      border-right: $perpendicular-borders;
    } @else if $direction == right or $direction == left {
      border-bottom: $perpendicular-borders;
      border-top: $perpendicular-borders;
    }
  }
}

@mixin transition-delay($delay) {
  -moz-transition-delay: $delay;
  -ms-transition-delay: $delay;
  -o-transition-delay: $delay;
  -webkit-transition-delay: $delay;
  transition-delay: $delay;
}

@mixin transform($options) {
  -moz-transform: $options;
  -ms-transform: $options;
  -o-transform: $options;
  -webkit-transform: $options;
  transform: $options;
}

@mixin transform-origin($options) {
  transform-origin: $options;
  -moz-transform-origin: $options;
  -webkit-transform-origin: $options;
  -o-transform-origin: $options;
  -ms-transform-origin: $options;
}
